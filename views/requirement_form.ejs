<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Requirement Form</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .form-control[readonly] {
      background-color: #e9ecef;
      opacity: 1;
    }
  </style>
</head>
<body>
  <div class="container mt-5">
    <h3>Requirement Form</h3>
    <form id="menuForm" onsubmit="handleSubmit(event)">
      <table class="table table-bordered" id="menuTable">
        <thead>
          <tr>
            <th>SN</th>
            <th>Menu Item Code</th>
            <th>Menu Item Description</th>
            <th>Quantity</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>1</td>
            <td><input type="text" class="form-control" name="menuItemCode[]" onchange="fetchDescription(this)"></td>
            <td><input type="text" class="form-control" name="menuItemDescription[]"></td>
            <td><input type="decimal" class="form-control" name="quantity[]"></td>
            <td><button type="button" class="btn btn-danger" onclick="deleteRow(this)">Delete</button></td>
          </tr>
        </tbody>
      </table>
      <button type="button" class="btn btn-secondary" onclick="addRow()">Add Row</button>
      <button type="submit" class="btn btn-primary">Submit</button>
    </form>
    <div id="resultContainer" class="mt-4"></div>
  </div>

  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script>
    function addRow() {
      const table = document.getElementById("menuTable").getElementsByTagName('tbody')[0];
      const rowCount = table.rows.length;
      const row = table.insertRow(rowCount);

      const cell1 = row.insertCell(0);
      const cell2 = row.insertCell(1);
      const cell3 = row.insertCell(2);
      const cell4 = row.insertCell(3);
      const cell5 = row.insertCell(4);

      cell1.innerHTML = rowCount + 1;
      cell2.innerHTML = `<input type="text" class="form-control" name="menuItemCode[]" onchange="fetchDescription(this)">`;
      cell3.innerHTML = `<input type="text" class="form-control" name="menuItemDescription[]">`;
      cell4.innerHTML = `<input type="decimal" class="form-control" name="quantity[]">`;
      cell5.innerHTML = `<button type="button" class="btn btn-danger" onclick="deleteRow(this)">Delete</button>`;
    }

    function deleteRow(button) {
      const row = button.closest('tr');
      row.remove();
      updateSN();
    }

    function updateSN() {
      const table = document.getElementById("menuTable").getElementsByTagName('tbody')[0];
      for (let i = 0; i < table.rows.length; i++) {
        table.rows[i].cells[0].innerHTML = i + 1;
      }
    }

    function handleSubmit(event) {
      event.preventDefault();

      const form = document.getElementById('menuForm');
      const formData = new FormData(form);
      const data = {};

      formData.forEach((value, key) => {
        if (!data[key]) {
          data[key] = [];
        }
        data[key].push(value);
      });

      console.log('Form Data:', data);

      fetch('/calculate-requirements', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })
      .then(response => response.json())
      .then(result => {
        console.log('Server Response:', result);
        displayResults(result);
      });
    }

    function displayResults(results) {
  // Aggregate results by item code
  const aggregatedResults = aggregateResults(results);

  const resultContainer = document.getElementById('resultContainer');
  resultContainer.innerHTML = '';

  const table = document.createElement('table');
  table.className = 'table table-striped';

  const thead = document.createElement('thead');
  thead.innerHTML = `
    <tr>
      <th>SN</th>
      <th>Item Code</th>
      <th>Ingredient Description</th>
      <th>Ingredient UOM</th>
      <th>Ingredient Quantity</th>
      <th>Rate</th>
      <th>Total Cost</th>
    </tr>
  `;
  table.appendChild(thead);

  const tbody = document.createElement('tbody');
  let totalCostSum = 0;

  aggregatedResults.forEach((result, index) => {
    totalCostSum += result.total_cost;
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${index + 1}</td>
      <td>${result.item_code}</td>
      <td>${result.ingredient_description}</td>
      <td>${result.ingredient_uom}</td>
      <td>${result.total_ingredient_qty}</td>
      <td>${result.rate}</td>
      <td>${result.total_cost.toFixed(2)}</td>
    `;
    tbody.appendChild(tr);
  });

  const totalRow = document.createElement('tr');
  totalRow.innerHTML = `
    <td colspan="6" class="text-right"><strong>Total Cost:</strong></td>
    <td><strong>${totalCostSum.toFixed(2)}</strong></td>
  `;
  tbody.appendChild(totalRow);

  table.appendChild(tbody);
  resultContainer.appendChild(table);
}

function aggregateResults(results) {
  const aggregated = [];

  // Map to track aggregated items
  const map = new Map();

  results.forEach(result => {
    const key = result.item_code;
    if (!map.has(key)) {
      map.set(key, {
        item_code: result.item_code,
        ingredient_description: result.ingredient_description,
        ingredient_uom: result.ingredient_uom,
        total_ingredient_qty: parseFloat(result.total_ingredient_qty),
        rate: parseFloat(result.rate),
        total_cost: parseFloat(result.total_cost)
      });
    } else {
      const existing = map.get(key);
      existing.total_ingredient_qty += parseFloat(result.total_ingredient_qty);
      existing.total_cost += parseFloat(result.total_cost);
    }
  });

  // Convert map values back to array
  map.forEach(value => {
    aggregated.push(value);
  });

  return aggregated;
}



    function fetchDescription(input) {
      const menuItemCode = input.value;
      const url = `/fetch-menu-item-description?menuItemCode=${menuItemCode}`;
      $.get(url, function(data) {
        const descriptionInput = input.closest('tr').querySelector('input[name="menuItemDescription[]"]');
        descriptionInput.value = data.description;
      });
    }
  </script>
</body>
</html>
